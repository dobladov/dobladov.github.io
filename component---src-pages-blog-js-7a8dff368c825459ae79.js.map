{"version":3,"sources":["webpack://personal-blog/./node_modules/react-feather/dist/icons/tag.js","webpack://personal-blog/./src/components/Tags.js","webpack://personal-blog/./src/pages/blog.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","Tag","forwardRef","_ref","ref","_ref$color","color","_ref$size","size","rest","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","x1","y1","x2","y2","displayName","style","Tags","tags","className","css","sort","a","b","totalCount","map","tag","Link","rel","to","defaultProps","undefined","formatter","Intl","DateTimeFormat","month","data","edges","allMdx","group","posts","edge","post","node","fields","date","Date","organizedPosts","forEach","getFullYear","push","title","description","entries","year","yearPosts","id","excerpt","slug","frontmatter","hook","dateTime","toISOString","format","getDate","aria-hidden"],"mappings":"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","file":"component---src-pages-blog-js-7a8dff368c825459ae79.js","sourcesContent":["function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { forwardRef } from 'react';\nvar Tag = forwardRef(function (_ref, ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"size\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size,\n    height: size,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: color,\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, rest), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M20.59 13.41l-7.17 7.17a2 2 0 0 1-2.83 0L2 12V2h10l8.59 8.59a2 2 0 0 1 0 2.82z\"\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    x1: \"7\",\n    y1: \"7\",\n    x2: \"7.01\",\n    y2: \"7\"\n  }));\n});\nTag.displayName = 'Tag';\nexport default Tag;","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport { Link } from 'gatsby'\nimport { css } from '@emotion/react'\n\nconst style = css`\n    li {\n      display: inline-block;\n    }\n`\n\nconst Tags = ({ tags, className }) => {\n  return (\n    <ul css={style} className={`unstyledList${className ? ` ${className}` : ''}`}>\n      {tags.sort((a, b) => a.totalCount < b.totalCount).map(({ tag, totalCount }, i) => (\n        <li key={tag}>\n          #\n          <Link rel=\"tag\" to={`/tags/${tag}`}>\n            {tag} ({totalCount})\n          </Link>\n          {(i < tags.length - 1) && (\n            <>\n              &#44;\n              &nbsp;\n            </>\n          )}\n        </li>\n      ))}\n    </ul>\n  )\n}\n\nTags.propTypes = {\n  tags: PropTypes.arrayOf(PropTypes.any).isRequired,\n  className: PropTypes.string\n}\n\nTags.defaultProps = {\n  className: undefined\n}\n\nexport default Tags\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql, Link } from 'gatsby'\nimport { css } from '@emotion/react'\nimport { Tag } from 'react-feather'\n// import Img from 'gatsby-image'\n\nimport SEO from '../components/seo'\nimport Layout from '../components/layout'\nimport Tags from '../components/Tags'\n\nconst formatter = new Intl.DateTimeFormat('en', { month: 'long' })\n\nconst style = css`\n  ul {\n    max-width: 1000px;\n    grid-area: content;\n    list-style-type: none;\n    padding: 0;\n  }\n\n  h2 {\n    font-weight: 100;\n  }\n\n  h3 {\n    margin: 0;\n    font-size: 1.8rem;\n  }\n\n  aside {\n    grid-area: side;\n\n    .tagsContainer {\n      display: flex;\n      align-items: flex-start;\n\n      svg {\n        position: relative;\n        top: 5px;\n        min-width: 24px;\n        margin-right: 10px;\n      }\n    }\n  }\n\n  > ul {\n    list-style-type: none;\n\n    .post {\n      margin-bottom: 40px;\n\n      .gatsby-image-wrapper {\n        margin-right: 40px;\n        border-radius: 2px;\n        min-width: 350px;\n      }\n    }\n\n    li:first-child h2 {\n      margin-top: 0;\n    }\n\n    .time {\n      display: flex;\n      align-items: center;\n\n      time {\n        color: var(--subtle);\n        font-size: 1.6rem;\n      }\n\n      svg {\n        margin-right: 10px;\n      }\n    }\n  }\n\n  .hook {\n    margin: 0;\n    font-size: 1.4rem;\n  }\n\n  @media (min-width: 900px) {\n    > ul {\n      padding-left: 10px;\n    }\n\n    .post {\n      display: flex;\n      padding-left: 20px;\n    }\n  }\n`\n\nconst blog = ({\n  data: {\n    allMdx: { edges },\n    tags: { group: tags }\n  }\n}) => {\n  const posts = edges.map(edge => {\n    const post = edge.node\n    post.fields.date = new Date(post.fields.date)\n    return post\n  })\n\n  const organizedPosts = {}\n  posts.forEach(post => {\n    if (!organizedPosts[post.fields.date.getFullYear()]) {\n      organizedPosts[post.fields.date.getFullYear()] = []\n    }\n    organizedPosts[post.fields.date.getFullYear()].push(post)\n  })\n\n  return (\n    <Layout>\n      <SEO title=\"Articles\" description=\"All blog posts\" />\n      <section css={style} className=\"double\">\n        <h1 className=\"title\">Articles</h1>\n        <ul className=\"content unstyledList\">\n          {Object.entries(organizedPosts)\n            .sort(([y1], [y2]) => y1 < y2)\n            .map(([year, yearPosts]) => (\n              <li key={year}>\n                <h2>{year}</h2>\n                <ul>\n                  {yearPosts.map(({ id, excerpt, fields: { slug, date }, frontmatter: { title, hook } }) => (\n                    <li key={id} className=\"post\">\n                      {/* {featuredImage && (\n                        <div style={{ maxHeight: `150px`, marginBottom: `1.45rem` }} className=\"gatsby-image-wrapper\">\n                          <Img fixed={featuredImage.childImageSharp.fixed} style={{maxHeight: '100%'}} />\n                        </div>\n                      )} */}\n                      <div>\n                        <div className=\"time\">\n                          <time dateTime={date.toISOString()}>\n                            {`${formatter.format(date)} ${date.getDate()}`}\n                          </time>\n                        </div>\n                        <span>\n                          <Link to={slug}>\n                            <h3>\n                              {title}\n                            </h3>\n                          </Link>\n                          <p className=\"hook\">{hook || excerpt}</p>\n                        </span>\n                      </div>\n                    </li>\n                  ))}\n                </ul>\n              </li>\n            ))}\n        </ul>\n        <aside>\n          <div className=\"tagsContainer\" >\n            <Tag\n              aria-hidden=\"true\"\n            />\n            <Tags tags={tags} />\n          </div>\n        </aside>\n      </section>\n    </Layout>\n  )\n}\nexport default blog\nexport const pageQuery = graphql`\n  query {\n    allMdx(sort: {order: DESC, fields: [fields___date]}) {\n      edges {\n        node {\n          id\n          excerpt\n          frontmatter {\n            title\n            date\n            hook\n          }\n          fields {\n            slug\n            date\n          }\n        }\n      }\n    }\n\n    tags: allMdx {\n      group(field: frontmatter___tags) {\n        tag: fieldValue\n        totalCount\n      }\n    }\n  }\n`\n\nblog.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired\n}\n"],"sourceRoot":""}